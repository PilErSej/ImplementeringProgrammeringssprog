
Lexer:

    | "scan"         -> Parser.SCAN pos


Parser:
    %token <(int*int)> SCAN 



    | SCAN LPAR FunArg COMMA Exp COMMA Exp RPAR       
                     { Scan ($3, $5, $7, (), $1) }
  
Typecheker: 

    | Scan (f, n_exp, arr_exp, _, pos) ->
        let (n_type  , n_dec  ) = checkExp ftab vtab n_exp
        let (arr_type, arr_dec) = checkExp ftab vtab arr_exp
        (*elem_type = argument corresponds to the array element type, *)
        let elem_type =
            match arr_type with
              | Array t -> t
              | other -> raise (MyError ("Scan: Argument not an array", pos))      
        let (f', f_arg_type) =
            match checkFunArg ftab vtab pos f with
              | (f', res, [a1; a2]) ->
                  if a1 = a2 && a2 = res
                  then (f', res)
                  else raise (MyError( "Scan: incompatible function type of " +
                                       (ppFunArg 0 f) + ": " + showFunType ([a1; a2], res)
                                     , pos))
              | (_, res, args) ->
                  raise (MyError ( "Scan: incompatible function type of " +
                                   ppFunArg 0 f + ": " + showFunType (args, res)
                                 , pos))      
        let err (s, t) = MyError ( "Scan: unexpected " + s + " type " + ppType t +
                                   ", expected " + ppType f_arg_type
                                 , pos)
        //elem_type = the same as the f's result type.
        if   elem_type = f_arg_type && elem_type = n_type then
             (arr_type, Scan (f', n_dec, arr_dec, elem_type, pos))  //return type is same as arr_type   
        elif elem_type = f_arg_type then
             raise (err ("neutral element", n_type))
        else raise (err ("array element", elem_type))


Interpeter:

  | Scan (farg, ne, arrexp, tp, pos) ->
        let farg_ret_type = rtpFunArg farg ftab pos
        let arr  = evalExp(arrexp, vtab, ftab)
        let nel  = evalExp(ne, vtab, ftab)
        match arr with
          | ArrayVal (lst,tp1) ->
            //get the Tail of the result from List.Scan (since first element after List.Scan is 0)
            ArrayVal( List.tail (List.scan (fun acc x -> evalFunArg (farg, vtab, ftab, pos, [acc;x])) nel lst)  , tp1)  
             
          | otherwise -> raise (MyError("Third argument of scan is not an array: "+ppVal 0 arr
                                       , pos))
CodeGen:
                      | Scan (binop, acc_exp, arr_exp, tp, pos) ->
      let arr_reg  = newName "arr_reg"   (* address of array *)
      let res_it_reg = newName "res_it_reg"

      let size_reg = newName "size_reg"  (* size of input array *)
      let i_reg    = newName "ind_var"   (* loop counter *)
      
      let tmp_reg  = newName "tmp_reg"   (* several purposes *)
      
      let loop_beg = newName "loop_beg"
      let loop_end = newName "loop_end"

      let acc_reg = newName "acc_reg"


      let arr_code = compileExp arr_exp vtable arr_reg

      let init_regs = [ Mips.MOVE (i_reg, "0") 
                      ; Mips.LW(size_reg, arr_reg, "0")
                      ; Mips.ADDI(arr_reg, arr_reg, "4")]
                      @ dynalloc (size_reg, place, tp)
                      @[ Mips.ADDI (res_it_reg, place, "4")]

      let acc_code = compileExp acc_exp vtable acc_reg


      (* Set in_arr_reg to address of first element instead. *)
      (* Set i_reg to 0. While i < size_reg, loop. *)
      let loop_code =
              [ Mips.LABEL(loop_beg)
              ; Mips.SUB(tmp_reg, i_reg, size_reg)
              ; Mips.BGEZ(tmp_reg, loop_end)
              ]

      (* Load arr[i] into tmp_reg *)
      let load_code =
              match getElemSize tp with
                | One  -> [ Mips.LB   (tmp_reg, arr_reg, "0")
                          ; Mips.ADDI (arr_reg, arr_reg, "1")

                          ]
                | Four -> [ Mips.LW   (tmp_reg, arr_reg, "0")
                          ; Mips.ADDI (arr_reg, arr_reg, "4")
                          ]

          (* place := binop(tmp_reg, place) *)
      let apply_code =
              applyFunArg(binop, [acc_reg; tmp_reg], vtable, acc_reg, pos)

      let store_code =
              match getElemSize tp with
                | One  -> [ Mips.SB   (acc_reg, res_it_reg, "0")
                          ; Mips.ADDI (res_it_reg, res_it_reg, "1")
                          ]
                | Four -> [ Mips.SW (acc_reg, res_it_reg, "0") 
                          ; Mips.ADDI (res_it_reg, res_it_reg, "4")
                          ]
      let loop_footer = 
               [ Mips.ADDI(i_reg, i_reg, "1")
               ; Mips.J loop_beg
               ; Mips.LABEL loop_end
               ]               
      
      arr_code 
      @ init_regs
      @ acc_code 
      @ loop_code 
      @ load_code 
      @ apply_code 
      @ store_code 
      @ loop_footer
